version: 2
jobs:
  build:
    docker:
      - image: dataworld/pyenv-tox

    working_directory: /root/tap-redshift

    steps:
      - checkout
      - restore_cache:
          keys:
            - tox_cache-v1-{{ checksum "tox.ini" }}
      - run:
          name: pyenv setup
          command: |
            pyenv local 3.6.0
      - run:
          name: tox
          command: tox --pre
      - save_cache:
          key: tox_cache-{{ checksum "tox.ini" }}
          paths:
            - .eggs
            - .tox
      - run:
          name: build dist
          command: python setup.py sdist bdist_wheel --universal
      - store_artifacts:
          path: ./dist
          destination: dist

  pypi-release:
    docker:
      - image: dataworld/pyenv-tox

    working_directory: /root/tap-redshift

    steps:
      - checkout
      - run:
          name: build dist
          command: python setup.py sdist bdist_wheel --universal
      - deploy:
          name: pypi release
          command: twine upload -u $PYPI_USERNAME -p $PYPI_PASSWORD dist/*

  docker-release:
    docker:
      - image: dataworld/pyenv-tox

    working_directory: /root/tap-redshift

    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: define PACKAGE_VERSION
          command: |
            PACKAGE_VERSION=$(python setup.py -V)
            echo "export PACKAGE_VERSION=$PACKAGE_VERSION" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: docker build
          command: docker build -t dataworld/tap-redshift -t dataworld/tap-redshift:$PACKAGE_VERSION .
      - deploy:
          name: docker-hub release
          command: |
            docker login -u $DOCKER_USER -p $DOCKER_PASS
            docker push dataworld/tap-redshift:latest
            docker push dataworld/tap-redshift:$PACKAGE_VERSION

workflows:
  version: 2
  build-and-release:
    jobs:
      - build
      - pypi-release:
          filters:
            branches:
              only:
                - release
          requires:
            - build
      - docker-release:
          filters:
            branches:
              only:
                - release
          requires:
            - build